tinytex::install_tinytex()
install.packages("tidyverse")
install.packages(c("boot", "class", "cluster", "codetools", "farver", "isoband", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "ps", "spatial", "survival", "tidyr"))
knitr::opts_chunk$set(echo = TRUE)
str(datacrab)
install.packages("Rlab")
library(Rlab)
library(reticulate)
py_install(matplotlib)
py_install(qt)
help()
library(Rlab)
library(reticulate)
library(reticulate)
install.packages("Rlab")
print("Hello World")
dataset = read.csv('Data.')
dataset = read.csv('Data.csv')
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Salary)
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset$Country = factor(dataset$Country,levels=c("France","Spain","Germany"),labels=c(1,2,3))
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,levels=c("No","Yes"),labels=c(0,1))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,levels=c("No","Yes"),labels=c(0,1))
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Salary)
dataset$Country = factor(dataset$Country,levels=c("France","Spain","Germany"),labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,levels=c("No","Yes"),labels=c(0,1))
View(dataset)
View(dataset)
library(caTools)
install.packages("caTools")
knitr::opts_chunk$set(echo = TRUE)
split = sample.split(dataset$Purchased, SplitRatio=0.8)
library(caTools)
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio=0.8)
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio=0.8)
split
testing_set = subset(dataset,split == FALSE)
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
testing_set[,2:3] = scale(testing_set[,2:3])
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(testing_set)
View(testing_set)
View(training_set)
dataset = read.csv('Salary_Data.csv')
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio=0.66)
library(caTools)
split = sample.split(dataset, SplitRatio=0.66)
split
dataset = read.csv('Salary_Data.csv')
library(caTools)
split = sample.split(dataset, SplitRatio=0.66)
split
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
View(dataset)
View(dataset)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
split = sample.split(dataset$Salary, SplitRatio=2/3)
split
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
?lm
View(dataset)
View(dataset)
regression = lm(formula=Salary ~ YearsExperience,
data = training_set)
summary(regression)
y_pred = predict(regression,newdata=testing_set)
y_pred
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience,y=training_set$Salary), colour="red") +
geom_line(aes(x=training_set$YearsExperience,y=predict(regression,newdata = training_set)), colour="blue") +
ggtitle("Sueldo vs Años Experiencia") +
xlab("Años de experiencia") +
ylab("Sueldo en $")
ggplot() +
geom_point(aes(x= testing_set$YearsExperience,y=testing_set$Salary), colour="red") +
geom_line(aes(x=training_set$YearsExperience,y=predict(regression,newdata = training_set)), colour="blue") +
ggtitle("Sueldo vs Años Experiencia - Resultados testing") +
xlab("Años de experiencia") +
ylab("Sueldo en $")
source('D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression/pers1R_multiple_regression.R')
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
# Codificar variables categóricas
dataset$State = factor(dataset$State,levels=c("New York","Florida","California"),labels=c(1,2,3))
library(caTools)
split = sample.split(dataset$Profit, SplitRatio=0.8)
training_set = subset(dataset,split == TRUE)
testing_set = subset(dataset,split == FALSE)
# Ajustar el modelo de regresión lineal múltiple con el Conjunto de Entrenamiento
# El punto es para indicar en la fórmula que todas las otras variables
regression = lm(formula = Profit ~ ., data = training_set)
summary(regression)
View(training_set)
View(training_set)
# Predecir los resultados con el conjunto de testing
y_pred = predict(regression,testing_set)
View(training_set)
View(training_set)
# Construir modelo optimo con la Eliminación hacia atrás (usamos las columnas para poder ir quitando de normal habria que buscar algo más automatico)
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
summary(regression)
# Construir modelo optimo con la Eliminación hacia atrás (usamos las columnas para poder ir quitando de normal habria que buscar algo más automatico)
SL = 0.05
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend + Marketing.Spend, data = dataset)
summary(regression)
regression = lm(formula = Profit ~ R.D.Spend, data = dataset)
summary(regression)
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
View(dataset)
View(dataset)
View(dataset)
# Modelo Regresión Lineal
lin_reg = lm(dataset$Salary ~ dataset$Level,data=dataset)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
pol_reg = lm(dataset$Salary ~ .,data=dataset)
summary(pol_reg)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
pol_reg = lm(dataset$Salary ~ .,data=dataset)
summary(pol_reg)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg,newdata = dataset$Level)),color = "blue")
ggtitle("Regresión Lineal") +
xlab("Level") +
ylab("Sueldo")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg,newdata = dataset$Level)),color = "blue") +
ggtitle("Regresión Lineal") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
ggtitle("Regresión Lineal") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Lineal") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_curve(aes(x = dataset$Level, y = predict(pol_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(pol_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
X_grid = c(1:10,0.1)
ggplot() +
geom_point(aes(x = X_grid, y = dataset$Salary),color = "red") +
geom_line(aes(x = X_grid, y = predict(pol_reg,newdata = X_grid)),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(pol_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
# Predicción de nuevos resultados
y_pred = predict(lin_reg,newdata=data.frame(Level = 6.5))
View(dataset)
View(dataset)
lin_reg = lm(dataset$Salary ~ dataset$Level,data=dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
pol_reg = lm(dataset$Salary ~ .,data=dataset)
y_pred = predict(lin_reg,newdata=data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Lineal") +
xlab("Level") +
ylab("Sueldo")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(pol_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
y_pred = predict(lin_reg,newdata = data.frame(Level = 6.5))
x_check = data.frame(Level = 6.5)
View(x_check)
View(x_check)
y_pred = predict(lin_reg,newdata = x_check)
y_pred = 0
y_pred = predict(lin_reg,newdata = x_check)
x_check = data.frame(Level = 6.5, Level2 = 6.5^2, Level3 = 6.5^3, Level4=6.5^4)
t_poly_pred = predict(pol_reg,newdata=x_check)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
lin_reg = lm(dataset$Salary ~ dataset$Level,data=dataset)
x_check = data.frame(Level = 6.5)
y_pred = 0
y_pred = predict(lin_reg,newdata = x_check)
# Modelo Regresión Lineal
# Viendo su summary se ve que hay numeros raros en el coeficiente cero y los incrementos lineales. No es lineal.
lin_reg = lm(formula = Salary ~ Level,data=dataset)
x_check = data.frame(Level = 6.5)
y_pred = 0
y_pred = predict(lin_reg,newdata = x_check)
# Modelo Regresión Polinómico
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
pol_reg = lm(dataset$Salary ~ .,data=dataset)
# Visualización de los modelos
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(lin_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Lineal") +
xlab("Level") +
ylab("Sueldo")
# Regresión polinómica
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = dataset$Level, y = predict(pol_reg,newdata = dataset)),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
x_check = data.frame(Level = 6.5, Level2 = 6.5^2, Level3 = 6.5^3, Level4=6.5^4)
t_poly_pred = predict(pol_reg,newdata=x_check)
X_grid = seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = X_grid, y = predict(pol_reg,newdata = data.frame(Level = X_grid))),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
X_grid = seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),color = "red") +
geom_line(aes(x = X_grid, y = predict(pol_reg,newdata = data.frame(Level = X_grid, Level2 = X_grid^2, Level3 = X_grid^3, Level4 = X_grid^4))),color = "blue") +
ggtitle("Regresión Polinómica") +
xlab("Level") +
ylab("Sueldo")
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install.packages("e1071")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
library(e1071)
regression = svm(formula = Salary ~ ., data = dataset, type="eps-regression", kernel="radial")
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualizacion del modelo de regresiÃ³n
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("PredicciÃ³n (Modelo de RegresiÃ³n)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 2 - Regression/Section 8 - Decision Tree Regression")
library(rpart)
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar Modelo de RegresiÃ³n con el Conjunto de Datos
library(rpart)
regression = rpart(formula = Salaries ~ ., data = dataset)
library(rpart)
regression = rpart(formula = Salary ~ ., data = dataset)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresion con Arbol de decision)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
?rpart
regression = rpart(formula = Salary ~ ., data = dataset,
control = rpart.control(minsplit = 1))
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresion con Arbol de decision)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# PredicciÃ³n de nuevos resultados con RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 2 - Regression/Section 9 - Random Forest Regression")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
install.packages("randomForest")
library(randomForest)
library(randomForest)
regression = randomForest(x = dataset[1], y = dataset$Salary, ntree=10)
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("PredicciÃ³n (Modelo de RegresiÃ³n)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
library(randomForest)
regression = randomForest(x = dataset[1], y = dataset$Salary, ntree=100)
# PredicciÃ³n de nuevos resultados con RegresiÃ³n
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# VisualizaciÃ³n del modelo de regresiÃ³n
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("PredicciÃ³n (Modelo de RegresiÃ³n)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
