tinytex::install_tinytex()
install.packages("tidyverse")
install.packages(c("boot", "class", "cluster", "codetools", "farver", "isoband", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "ps", "spatial", "survival", "tidyr"))
knitr::opts_chunk$set(echo = TRUE)
str(datacrab)
install.packages("Rlab")
library(Rlab)
library(reticulate)
py_install(matplotlib)
py_install(qt)
help()
library(Rlab)
library(reticulate)
library(reticulate)
install.packages("Rlab")
print("Hello World")
dataset = read.csv('Data.')
dataset = read.csv('Data.csv')
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Salary)
View(dataset)
View(dataset)
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)")
dataset = read.csv('Ads_CTR_Optimisation.csv')
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
max_upper_bound = 0
ad_selected = 0
total_rewards = 0
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
max_upper_bound = 0
ad_selected = 0
total_rewards = 0
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
max_upper_bound = 0
ad_selected = 0
total_rewards = 0
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
max_upper_bound = 0
ad_selected = 0
total_rewards = 0
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
max_upper_bound = 0
ad_selected = 0
total_rewards = 0
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
# Visualización resutlados
hist(ads_selected)
# Visualización resutlados
hist(ads_selected,xlim = 0,ylim=d)
# Visualización resutlados
hist(ads_selected,xlim = 1,ylim=d)
# Visualización resutlados
hist(ads_selected,xlim = 1.0,ylim=d)
ads_selected
number_of_selections
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
max_upper_bound = 0
ad_selected = 0
total_rewards = 0
for(n in 1:N) {
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
Importar DataSet
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
total_rewards = 0
for(n in 1:N) {
max_upper_bound = 0
ad_selected = 0
for (i in 1:d) {
if (number_of_selections[i]>0) {
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad_selected = i
}
}
number_of_selections[ad_selected] =  number_of_selections[ad_selected] + 1
ads_selected = append(ads_selected,ad_selected)
reward = dataset[n,ad_selected]
sums_of_rewards[ad_selected] =  sums_of_rewards[ad_selected] + reward
total_rewards = total_rewards + reward
}
# Visualización resutlados
hist(ads_selected)
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 6 - Reinforcement Learning/Section 33 - Thompson Sampling")
# Importar DataSet
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementar UCB
N = 10000
d = 10
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_rewards = 0
for(n in 1:N) {
max_random = 0
ad_selected = 0
for (i in 1:d) {
random_beta = rbeta(n=1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if (random_beta > max_random) {
max_random = random_beta
ad_selected = i
}
}
reward = dataset[n,ad_selected]
if (reward == 1) {
number_of_rewards_1[ad_selected] = number_of_rewards_1[ad_selected] + 1
} else {
number_of_rewards_0[ad_selected] = number_of_rewards_0[ad_selected] + 1
}
ads_selected = append(ads_selected,ad_selected)
total_rewards = total_rewards + reward
}
# VisualizaciÃ³n resutlados
hist(ads_selected)
N = 10000
d = 10
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_rewards = 0
for(n in 1:N) {
max_random = 0
ad_selected = 0
for (i in 1:d) {
random_beta = rbeta(n=1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if (random_beta > max_random) {
max_random = random_beta
ad_selected = i
}
}
reward = dataset[n,ad_selected]
if (reward == 1) {
number_of_rewards_1[ad_selected] = number_of_rewards_1[ad_selected] + 1
} else {
number_of_rewards_0[ad_selected] = number_of_rewards_0[ad_selected] + 1
}
ads_selected = append(ads_selected,ad_selected)
total_rewards = total_rewards + reward
}
N = 10000
d = 10
number_of_rewards_1 = integer(d)
number_of_rewards_0 = integer(d)
ads_selected = integer(0)
total_rewards = 0
for(n in 1:N) {
max_random = 0
ad_selected = 0
for (i in 1:d) {
random_beta = rbeta(n=1,
shape1 = number_of_rewards_1[i]+1,
shape2 = number_of_rewards_0[i]+1)
if (random_beta > max_random) {
max_random = random_beta
ad_selected = i
}
}
reward = dataset[n,ad_selected]
if (reward == 1) {
number_of_rewards_1[ad_selected] = number_of_rewards_1[ad_selected] + 1
} else {
number_of_rewards_0[ad_selected] = number_of_rewards_0[ad_selected] + 1
}
ads_selected = append(ads_selected,ad_selected)
total_rewards = total_rewards + reward
}
# VisualizaciÃ³n resutlados
hist(ads_selected)
