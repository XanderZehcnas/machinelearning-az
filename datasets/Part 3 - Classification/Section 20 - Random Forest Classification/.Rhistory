tinytex::install_tinytex()
install.packages("tidyverse")
install.packages(c("boot", "class", "cluster", "codetools", "farver", "isoband", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "ps", "spatial", "survival", "tidyr"))
knitr::opts_chunk$set(echo = TRUE)
str(datacrab)
install.packages("Rlab")
library(Rlab)
library(reticulate)
py_install(matplotlib)
py_install(qt)
help()
library(Rlab)
library(reticulate)
library(reticulate)
install.packages("Rlab")
print("Hello World")
dataset = read.csv('Data.')
dataset = read.csv('Data.csv')
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
View(dataset)
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x,na.rm=TRUE)),dataset$Salary)
View(dataset)
View(dataset)
setwd("D:/Desarrollo/GitHubForks/machinelearning-az/datasets/Part 3 - Classification/Section 20 - Random Forest Classification")
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificaciÃ³n como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores (No hace falta escalar lo mantiene para pintar en la gráfica mejor)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento.
library(randomForest)
library(randomForest)
classifier = randomForest(formula=Purchased ~ ., data = training_set, ntree=10)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
library(randomForest)
classifier = randomForest(formula=Purchased ~ ., data = training_set, ntree=100)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
library(randomForest)
classifier = randomForest(formula=Purchased ~ ., data = training_set, ntree=500)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
library(randomForest)
classifier = randomForest(formula=Purchased ~ ., data = training_set, ntree=10)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
# VisualizaciÃ³n del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'ClasificaciÃ³n (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'ClasificaciÃ³n (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
